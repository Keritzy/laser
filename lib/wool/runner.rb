module Wool
  class Runner
    def initialize(argv)
      @argv = argv
    end

    def run
      settings, files = collect_options_and_arguments
      scanner = Wool::Scanner.new(settings)
      warnings = collect_warnings(files, scanner)
      display_warnings(warnings, settings)
    end

    def collect_options_and_arguments
      swizzling_argv do
        settings = get_settings
        files = ARGV.dup
        [settings, files]
      end
    end

    # Parses the command-line options using Trollop
    #
    # @return [Hash{Symbol => Object}] the settings entered by the user
    def get_settings
      Trollop::options do
        banner 'Ask Peeves - the Ruby Linter'
        opt :fix, 'Should errors be fixed in-line?', :short => '-f'
        opt :"report-fixed", 'Should fixed errors be reported anyway?', :short => '-r'
      end
    end

    # Sets the ARGV variable to the runner's arguments during the execution
    # of the block.
    def swizzling_argv
      old_argv = ARGV.dup
      ARGV.replace @argv
      yield
    ensure
      ARGV.replace old_argv
    end

    # Collects warnings from all the provided files by running them through
    # the scanner.
    #
    # @param [Array<String>] files the files to scan. If (stdin) is in the
    #   array, then data will be read from STDIN until EOF is reached.
    # @param [Wool::Scanner] scanner the scanner that will look for warnings
    #   in the source text.
    # @return [Array<Wool::Warning>] a set of warnings, ordered by file.
    def collect_warnings(files, scanner)
      files.map do |file|
        data = file == '(stdin)' ? STDIN.read : File.read(file)
        scanner.settings[:output_file] = File.open(file, 'w') if scanner.settings[:fix]
        results = scanner.scan(data, file)
        scanner.settings[:output_file].close if scanner.settings[:fix]
        results
      end.flatten
    end

    # Displays warnings using user-provided settings.
    #
    # @param [Array<Wool::Warning>] warnings the warnings generated by the input
    #   files, ordered by file
    # @param [Hash{Symbol => Object}] settings the user-set display settings
    def display_warnings(warnings, settings)
      num_fixable = warnings.select { |warning| warning.line != warning.fix(nil) }.size
      num_total = warnings.size

      results = "#{num_total} warnings found. #{num_fixable} are fixable."
      puts results
      puts "=" * results.size

      warnings.each do |warning|
        puts "#{warning.file}:#{warning.line_number} #{warning.name} (#{warning.severity}) - #{warning.desc}"
      end
    end
  end
end