# Autogenerated from a Treetop grammar. Edits may be lost.


module Wool
  module Parsers
    module GeneralPurpose
      include Treetop::Runtime

      def root
        @root ||= :space
      end

      def _nt_space
        start_index = index
        if node_cache[:space].has_key?(index)
          cached = node_cache[:space][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        if has_terminal?('\G[ \\t]', true, index)
          r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          r0 = nil
        end

        node_cache[:space][start_index] = r0

        r0
      end

    end

    class GeneralPurposeParser < Treetop::Runtime::CompiledParser
      include GeneralPurpose
    end

  end
end