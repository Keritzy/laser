require 'wool/annotation_parser/useful_parsers_parser'
module Wool
  module Parsers
    grammar Structural   
      include GeneralPurpose
      rule structural_constraint
        '#' method_name space* parenthesized_type_list space* '->' space* return_type:type {
          def constraints
            result = [Types::StructuralConstraint.new(
                method_name.text_value, parenthesized_type_list.constraints,
                return_type.constraints)]
          end
        } / '#' method_name space* parenthesized_type_list space* return_type:type {
          def constraints
            result = [Types::StructuralConstraint.new(
                method_name.text_value, parenthesized_type_list.constraints,
                return_type.constraints)]
          end
        } / '#' method_name space* parenthesized_type_list {
          def constraints
            result = [Types::StructuralConstraint.new(
                method_name.text_value, parenthesized_type_list.constraints, [])]
          end
        } / '#' method_name space* '->' space* return_type:type {
          def constraints
            result = [Types::StructuralConstraint.new(
                method_name.text_value, [], return_type.constraints)]
          end
        } / '#' method_name {
          def constraints
            result = [Types::StructuralConstraint.new(method_name.text_value, [], [])]
          end
        }
      end
    end
  end
end