# Autogenerated from a Treetop grammar. Edits may be lost.


module Wool
  module Parsers
    module Annotation
      include Treetop::Runtime

      def root
        @root ||= :type
      end

      def _nt_type
        start_index = index
        if node_cache[:type].has_key?(index)
          cached = node_cache[:type][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_top
        if r1
          r0 = r1
        else
          r2 = _nt_self_type
          if r2
            r0 = r2
          else
            r3 = _nt_constant
            if r3
              r0 = r3
            else
              @index = i0
              r0 = nil
            end
          end
        end

        node_cache[:type][start_index] = r0

        r0
      end

      module Top0
        def constraints
          []
        end
      end

      def _nt_top
        start_index = index
        if node_cache[:top].has_key?(index)
          cached = node_cache[:top][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        if has_terminal?("Top", false, index)
          r0 = instantiate_node(SyntaxNode,input, index...(index + 3))
          r0.extend(Top0)
          @index += 3
        else
          terminal_parse_failure("Top")
          r0 = nil
        end

        node_cache[:top][start_index] = r0

        r0
      end

      module SelfType0
        def constraints
          [Constraints::SelfTypeConstraint.new]
        end
      end

      def _nt_self_type
        start_index = index
        if node_cache[:self_type].has_key?(index)
          cached = node_cache[:self_type][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        if has_terminal?("self", false, index)
          r0 = instantiate_node(SyntaxNode,input, index...(index + 4))
          r0.extend(SelfType0)
          @index += 4
        else
          terminal_parse_failure("self")
          r0 = nil
        end

        node_cache[:self_type][start_index] = r0

        r0
      end

      module Constant0
      end

      module Constant1
        def constraints
          [Constraints::ClassConstraint.new(text_value, :covariant)]
        end
      end

      def _nt_constant
        start_index = index
        if node_cache[:constant].has_key?(index)
          cached = node_cache[:constant][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          i1, s1 = index, []
          if has_terminal?("::", false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("::")
            r3 = nil
          end
          if r3
            r2 = r3
          else
            r2 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r2
          if r2
            if has_terminal?('\G[A-Z]', true, index)
              r4 = true
              @index += 1
            else
              r4 = nil
            end
            s1 << r4
            if r4
              s5, i5 = [], index
              loop do
                if has_terminal?('\G[A-Za-z_]', true, index)
                  r6 = true
                  @index += 1
                else
                  r6 = nil
                end
                if r6
                  s5 << r6
                else
                  break
                end
              end
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              s1 << r5
            end
          end
          if s1.last
            r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
            r1.extend(Constant0)
          else
            @index = i1
            r1 = nil
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        if s0.empty?
          @index = i0
          r0 = nil
        else
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Constant1)
        end

        node_cache[:constant][start_index] = r0

        r0
      end

    end

    class AnnotationParser < Treetop::Runtime::CompiledParser
      include Annotation
    end

  end
end