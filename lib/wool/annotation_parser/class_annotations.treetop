require 'wool/annotation_parser/useful_parsers_parser'
module Wool
  module Parsers
    grammar Class   
      include GeneralPurpose
      rule hash_constraint
        variance_constraint space* '=>' space* variance_constraint {
          def constraints
            [Constraints::GenericClassConstraint.new(
                'Hash', :covariant, [variance_constraint1.constraints.first,
                variance_constraint2.constraints.first])]
          end
        } / array_constraint / generic_constraint / dont_care_constraint
      end
      
      rule dont_care_constraint
        '_' {
          def constraints
            [Constraints::ClassConstraint.new('Object', :covariant)]
          end
        }
      end
      
      rule array_constraint
        '[' space* type space* ']' {
          def constraints
            [Constraints::GenericClassConstraint.new(
                'Array', :covariant, [elements[2].constraints.first])]
          end
        }
      end
      
      rule generic_constraint
        variance_constraint space* '<' space* generic_list space* '>' {
          def constraints
            class_constraint = variance_constraint.constraints.first
            [Constraints::GenericClassConstraint.new(
                class_constraint.class_name, class_constraint.variance,
                generic_list.constraints)]
          end
        } / variance_constraint
      end
      
      rule generic_list
        type space* ',' space* generic_list {
          def constraints
            type.constraints + generic_list.constraints
          end
        } / type
      end

      rule variance_constraint
        constant "=" !'>' {
          def constraints
            constant.constraints.map { |x| x.variance = :invariant; x }
          end
        } / constant "-" {
          def constraints
            constant.constraints.map { |x| x.variance = :contravariant; x }
          end
        } / constant
      end

      rule constant
        ( '::'? [A-Z] [A-Za-z_]* )+ {
          def constraints
            [Constraints::ClassConstraint.new(text_value, :covariant)]
          end
        }
      end
    end
  end
end