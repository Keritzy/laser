require 'wool/annotation_parser/useful_parsers_parser'
module Wool
  module Parsers
    grammar Class   
      include GeneralPurpose
      rule class_based_constraint
        hash_constraint / array_constraint / generic_constraint / dont_care_constraint / tuple_constraint
      end
      
      rule hash_constraint
        variance_constraint space* '=>' space* variance_constraint {
          def type
            Types::GenericType.new(Types::ClassType.new('Hash', :covariant),
                [variance_constraint1.type, variance_constraint2.type])
          end
        }
      end
      
      rule dont_care_constraint
        '_' {
          def type
            Types::ClassType.new('Object', :covariant)
          end
        }
      end
      
      rule array_constraint
        '[' space* type space* ']' {
          def type
            Types::GenericType.new(Types::ClassType.new('Array', :covariant),
                [elements[2].type])
          end
        }
      end
      
      rule tuple_constraint
        parenthesized_type_list {
          def type
            Types::TupleType.new(all_types)
          end
        }
      end
      
      rule generic_constraint
        variance_constraint space* '<' space* type_list space* '>' {
          def type
            type_to_generify = variance_constraint.type
            Types::GenericType.new(type_to_generify, type_list.all_types)
          end
        } / variance_constraint
      end

      rule variance_constraint
        constant "=" !'>' {
          def type
            result = constant.type
            result.variance = :invariant
            result
          end
        } / constant "-" {
          def type
            result = constant.type
            result.variance = :contravariant
            result
          end
        } / constant
      end

      rule constant
        ( '::'? [A-Z] [A-Za-z_]* )+ {
          def type
            Types::ClassType.new(text_value, :covariant)
          end
        }
      end
    end
  end
end