module Laser
  module Parsers
    grammar Annotation
      include Class
      include Structural
      include Overload
      include GeneralPurpose
      
      rule named_annotation
        named_type_annotation / named_literal_annotation
      end

      rule named_type_annotation
        space* annotation_name ':' space* type space* {
          def literal?
            false
          end

          def literal
            raise TypeError.new('This annotation is not a literal. Call #literal? first.')
          end

          def type?
            true
          end

          def type
            super.type
          end
        
          def name
            annotation_name.text_value
          end
        }
      end
      
      rule named_literal_annotation
        space* annotation_name ':' space* literal space* {
          def literal?
            true
          end
          
          def literal
            super.literal
          end

          def type?
            false
          end

          def type
            raise TypeError.new('This annotation is not a type. Call #type? first.')
          end

          def name
            annotation_name.text_value
          end
        }
      end
      
      rule literal
        'false' { 
          def literal
            false
          end
        } / 'true' {
          def literal
            true
          end
        } / 'nil' {
          def literal
            nil
          end
        } / ('never' / 'maybe' / 'always' / 'required' / 'optional' / 'foolish' / 'ignored') {
          def literal
            text_value.to_sym
          end
        }
      end

      rule type
        union_type / non_union_type / empty_type
      end

      rule union_type
        non_union_type rest_members:(space* '|' space* non_union_type)+ {
          def type
            Types::UnionType.new([non_union_type, *rest_members].map(&:type))
          end
          
          def rest_members
            super.elements.map(&:non_union_type)
          end
        }
      end

      rule non_union_type
        (top / self_type / function_type / class_based_constraint / structural_constraint)
      end
      
      rule empty_type
        'empty' {
          def type
            Types::EMPTY
          end
        }
      end

      rule top
        "Top" {
          def type
            []
          end
        }
      end

      rule self_type
        "self" {
          def type
            Types::SelfType.new
          end
        }
      end
    end
  end
end
