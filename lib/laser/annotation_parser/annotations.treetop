module Laser
  module Parsers
    grammar Annotation
      include Class
      include Structural
      include GeneralPurpose
      
      rule named_annotation
        space* annotation_name ':' space* type space* {
          def type
            super.type
          end
          
          def name
            annotation_name.text_value
          end
        }
      end

      rule type
        union_type / non_union_type
      end

      rule union_type
        non_union_type rest_members:(space* '|' space* non_union_type)+ {
          def type
            Types::UnionType.new([non_union_type, *rest_members].map(&:type))
          end
          
          def rest_members
            super.elements.map(&:non_union_type)
          end
        }
      end

      rule non_union_type
        (top / self_type / class_based_constraint / structural_constraint)
      end

      rule top
        "Top" {
          def type
            []
          end
        }
      end

      rule self_type
        "self" {
          def type
            Types::SelfType.new
          end
        }
      end
    end
  end
end